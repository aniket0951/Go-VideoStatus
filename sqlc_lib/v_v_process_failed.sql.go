// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: v_v_process_failed.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUnPublishedVideo = `-- name: CreateUnPublishedVideo :one
insert into video_verification_process_failed (
    video_id,
    unpublished_by,
    status,
    reason
) values (
    $1,$2,$3,$4
) returning "Id", video_id, verification_failed_by, unpublished_by, status, reason, is_verification_failed, is_unpublished, created_at, updated_at
`

type CreateUnPublishedVideoParams struct {
	VideoID       uuid.UUID     `json:"video_id"`
	UnpublishedBy uuid.NullUUID `json:"unpublished_by"`
	Status        string        `json:"status"`
	Reason        string        `json:"reason"`
}

func (q *Queries) CreateUnPublishedVideo(ctx context.Context, arg CreateUnPublishedVideoParams) (VideoVerificationProcessFailed, error) {
	row := q.db.QueryRowContext(ctx, createUnPublishedVideo,
		arg.VideoID,
		arg.UnpublishedBy,
		arg.Status,
		arg.Reason,
	)
	var i VideoVerificationProcessFailed
	err := row.Scan(
		&i.Id,
		&i.VideoID,
		&i.VerificationFailedBy,
		&i.UnpublishedBy,
		&i.Status,
		&i.Reason,
		&i.IsVerificationFailed,
		&i.IsUnpublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createVerificationFailed = `-- name: CreateVerificationFailed :one
insert into video_verification_process_failed (
    video_id,
    verification_failed_by,
    status,
    reason
) values (
    $1,$2,$3,$4
) returning "Id", video_id, verification_failed_by, unpublished_by, status, reason, is_verification_failed, is_unpublished, created_at, updated_at
`

type CreateVerificationFailedParams struct {
	VideoID              uuid.UUID     `json:"video_id"`
	VerificationFailedBy uuid.NullUUID `json:"verification_failed_by"`
	Status               string        `json:"status"`
	Reason               string        `json:"reason"`
}

func (q *Queries) CreateVerificationFailed(ctx context.Context, arg CreateVerificationFailedParams) (VideoVerificationProcessFailed, error) {
	row := q.db.QueryRowContext(ctx, createVerificationFailed,
		arg.VideoID,
		arg.VerificationFailedBy,
		arg.Status,
		arg.Reason,
	)
	var i VideoVerificationProcessFailed
	err := row.Scan(
		&i.Id,
		&i.VideoID,
		&i.VerificationFailedBy,
		&i.UnpublishedBy,
		&i.Status,
		&i.Reason,
		&i.IsVerificationFailed,
		&i.IsUnpublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVerificationFailed = `-- name: DeleteVerificationFailed :execresult
delete from video_verification_process_failed
where video_id = $1
`

func (q *Queries) DeleteVerificationFailed(ctx context.Context, videoID uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteVerificationFailed, videoID)
}
