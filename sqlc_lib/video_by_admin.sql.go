// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: video_by_admin.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getVideoByAdmin = `-- name: GetVideoByAdmin :many
select id, title, file_address, uploaded_by, status, created_at, updated_at from video_by_admin
where uploaded_by = $1 and status= $2
order by created_at desc
limit $3
offset $4
`

type GetVideoByAdminParams struct {
	UploadedBy uuid.UUID `json:"uploaded_by"`
	Status     string    `json:"status"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetVideoByAdmin(ctx context.Context, arg GetVideoByAdminParams) ([]VideoByAdmin, error) {
	rows, err := q.db.QueryContext(ctx, getVideoByAdmin,
		arg.UploadedBy,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VideoByAdmin{}
	for rows.Next() {
		var i VideoByAdmin
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.FileAddress,
			&i.UploadedBy,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoByAdminFullDetail = `-- name: GetVideoByAdminFullDetail :one
select va.title as video_title,
va.file_address as video_address,
va.created_at as uploaded_at,
va.id as video_id,
u.name as uploaded_user_name
from video_by_admin as va
inner join users as u
on va.uploaded_by = u.id
where va.id = $1
`

type GetVideoByAdminFullDetailRow struct {
	VideoTitle       string    `json:"video_title"`
	VideoAddress     string    `json:"video_address"`
	UploadedAt       time.Time `json:"uploaded_at"`
	VideoID          uuid.UUID `json:"video_id"`
	UploadedUserName string    `json:"uploaded_user_name"`
}

func (q *Queries) GetVideoByAdminFullDetail(ctx context.Context, id uuid.UUID) (GetVideoByAdminFullDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getVideoByAdminFullDetail, id)
	var i GetVideoByAdminFullDetailRow
	err := row.Scan(
		&i.VideoTitle,
		&i.VideoAddress,
		&i.UploadedAt,
		&i.VideoID,
		&i.UploadedUserName,
	)
	return i, err
}

const updateVideoStatus = `-- name: UpdateVideoStatus :execresult
update video_by_admin
set status = $2
where id = $1
`

type UpdateVideoStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateVideoStatus(ctx context.Context, arg UpdateVideoStatusParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateVideoStatus, arg.ID, arg.Status)
}

const uploadVideoByAdmin = `-- name: UploadVideoByAdmin :one
insert into video_by_admin (
    title,
    file_address,
    uploaded_by,
    status
) values (
    $1,$2,$3,$4
) returning id, title, file_address, uploaded_by, status, created_at, updated_at
`

type UploadVideoByAdminParams struct {
	Title       string    `json:"title"`
	FileAddress string    `json:"file_address"`
	UploadedBy  uuid.UUID `json:"uploaded_by"`
	Status      string    `json:"status"`
}

func (q *Queries) UploadVideoByAdmin(ctx context.Context, arg UploadVideoByAdminParams) (VideoByAdmin, error) {
	row := q.db.QueryRowContext(ctx, uploadVideoByAdmin,
		arg.Title,
		arg.FileAddress,
		arg.UploadedBy,
		arg.Status,
	)
	var i VideoByAdmin
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.FileAddress,
		&i.UploadedBy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
